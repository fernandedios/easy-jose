{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.min.js","sourcesContent":["'use strict';\n\nrequire('fast-text-encoding');\nconst jose = require('node-jose');\nconst URLSafeBase64 = require('urlsafe-base64');\n\nif (typeof Promise === \"undefined\") {\n  require(\"es6-promise\").polyfill();\n}\n\nlet keystore;\n\nconst init = () => {\n  keystore = jose.JWK.createKeyStore();\n};\n\nconst getKeystore = () => {\n  return keystore;\n};\n\nconst generateKeys = async (kty = 'RSA', size = 2048, isEncoded = false, isPadded = false) => {\n  try {\n    const keys = await keystore.generate(kty, size);\n    let public_key = keys.toJSON();\n\n    // if user wants to encode the public key\n    if (isEncoded) {\n      public_key = encode(keys.toJSON());\n\n      // if user wants to add padding for compatibility\n      if (isPadded) {\n        while (public_key.length % 4 !== 0) {\n          public_key += \"=\";\n        }\n      }\n    }\n\n    // return both public and private keys\n    return { public_key, private_key: result.toJSON(true) };\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\nconst encryptContent = async (public_key, payload, isKeyEncoded = false) => {\n  if (!payload) throw new Error('Missing encrypted payload');\n\n  let key = public_key;\n  // is public key base64 encoded\n  if (isKeyEncoded) {\n    key = decode(public_key);\n  }\n\n  try {\n    const prepare = await jose.JWK.asKey(key);\n    const data = await jose.JWE.createEncrypt(key).update(JSON.stringify(payload)).final();\n\n    return data;\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\nconst decryptContent = async (private_key, payload, isPayloadEncoded = false) => {\n  if (!payload) throw new Error('Missing encrypted payload');\n\n  let enc = payload;\n  // is payload base64 encoded\n  if (isPayloadEncoded) {\n    enc = decode(payload);\n  }\n\n  try {\n    const add = await keystore.add(private_key);\n    const data = await jose.JWE.createDecrypt(keystore).decrypt(enc);\n    return convertU8AToString(data.payload);\n  } catch (err) {\n    throw new Error(err);\n  }\n};\n\nconst encode = payload => {\n  return URLSafeBase64.encode(Buffer.from(JSON.stringify(payload), 'utf8'));\n};\n\nconst decode = payload => {\n  return JSON.parse(URLSafeBase64.decode(payload).toString('utf8'));\n};\n\nconst convertU8AToString = u8a => {\n  return JSON.parse(new TextDecoder(\"utf-8\").decode(u8a));\n};\n\nmodule.exports = {\n  init,\n  getKeystore,\n  generateKeys,\n  encryptContent,\n  decryptContent,\n  encode,\n  decode,\n  convertU8AToString\n};\n"]}